// 3. memory allocation

// 포인터는 *값 이라고 했을 때, 값=주소인 주소를 찾아가서 해당 주소의 값을 변경하라는 의미임
// (예를들어 ptr = 15,362였다면, *ptr = 4는 15,362라는 주소에 가서 값을 4로 넣어라 라는 의미)
// 포인터를 사용하기 전에, 주소로 초기화를 먼저 해줄 것. 안하면 괜히 다른 주소로 가서 값을 변경할 우려가 있음

#include <iostream>
using namespace std;

int main()
{
	int* ptr;

	// 새로운 주소를 선언하지 않으면, 아래와 같이 그냥 *ptr를 새로운 값으로 엎어칠 때 
	// 우리도 모르는 임의의 주소에 가서 (ptr 자체가 초기화가 안되었기 때문에) 그 주소의 값을 변경한다.
	// 따라서 아래와 같이 포인터를 쓸거면, 포인터가 가르키는 주소를 초기화 하는 작업이 필요하다
	// 아니면 그냥 int * ptr = new int {7}; 로 한번에 초기화까지 해도 됨

	ptr = new int; //받으면 돌려주는거까지 세트로 항상 고려

	//위의 int*ptr의 *과 다른의미임, 위는 포인터 변수를 쓰겠다는 소리고, 아래는 디-레퍼런싱을 한 값부분을 정의하겠다는 소리
	*ptr = 4;

	
	cout << *ptr << endl;

	// 포인터를 사용한 후에는 해당 부분을 삭제하고, 주소값을 다시 초기화한다. 이때 주로 NULL 값을 쓴다. (이건 세트로)
	delete ptr;
	ptr = NULL;

	return 0;

}


// 배열 포인터의 경우
int main()
{
	int* arr;
	int n;

	cout << "Please enter...";
	cin >> n;
	
	// 마찬가지로 위에서 포인터를 선언하고, 주소를 초기화함. 이 때 배열을 선언하면서 초기화
	// 그러면 새로운 주소에 배열이 쭉 깔림
	arr = new int[n];

	// 새로운 주소 배열에 값을 다 넣어준다. 
	for (int i = 0; i < n; i++)
		arr[i] = 2 * i;
	
	// 이후 주소 부분을 삭제 

	delete[] arr;
}